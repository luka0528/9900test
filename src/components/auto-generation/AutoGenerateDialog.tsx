"use client";
import { Button } from "../ui/button";
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "~/components/ui/dialog";
import { GlowingButton } from "../ui/button";
import { Input } from "../ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "../ui/form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Textarea } from "../ui/textarea";
import { api } from "~/trpc/react";
import SwaggerUI from "swagger-ui-react";
import "swagger-ui-react/swagger-ui.css";
import { toast } from "sonner";
import 'swagger-ui-react/swagger-ui.css';

const formSchema = z.object({
  description: z.string().min(1),
});

export default function AutoGenerateDialog() {
  const [openApiSpec, setOpenApiSpec] = useState<string | null>(null);
  const [file, setFile] = useState<File | null>(null);

  // const { mutate: validateOpenApiSpec, isPending: isGenerating } =
  //   api.autoDocs.validateOpenApiSpec.useMutation({
  //     onSuccess: (data) => {
  //       setOpenApiSpec(data);
  //     },
  //     onError: (error) => {
  //       toast.error("Failed to generate service");
  //     },
  //   });

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      description: "",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    const rawSpec = await file?.text();
    // if (parsedSpec) {
    //   validateOpenApiSpec({
    //     fileContent: JSON.stringify(parsedSpec),
    //     description: values.description,
    //   });
    // }

    console.log(rawSpec);

    setOpenApiSpec(rawSpec ?? null);
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <GlowingButton variant="secondary">Auto Generate</GlowingButton>
      </DialogTrigger>
      <DialogContent className="max-w-4xl">
        <DialogHeader>
          <DialogTitle>Auto Generate</DialogTitle>
          <DialogDescription>
            Auto generate a service by uploading an OpenAPI specification file
          </DialogDescription>
        </DialogHeader>
        <Input
          type="file"
          accept=".json"
          onChange={(e) => setFile(e.target.files?.[0] ?? null)}
        />
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Generate</Button>
          </form>
        </Form>
        <div className="h-[500px] overflow-y-auto">
          {openApiSpec ? (
            <div className="swagger-shadcn">
              <SwaggerUI spec={openApiSpec} docExpansion="list" />
            </div>
          ) : (
            <div>
              <p>No OpenAPI specification found</p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
