"use client";
import { Button } from "../ui/button";
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "~/components/ui/dialog";
import { GlowingButton } from "../ui/button";
import { Input } from "../ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "../ui/form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Textarea } from "../ui/textarea";
import { api } from "~/trpc/react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import SwaggerParser from "@apidevtools/swagger-parser";
import type { OpenAPI } from "openapi-types";

const formSchema = z.object({
  serviceName: z.string().min(1),
  description: z.string().min(1),
});

export default function AutoGenerateDialog() {
  const router = useRouter();
  const [file, setFile] = useState<File | null>(null);

  const { mutate: createServiceFromOpenApi } =
    api.autoDocs.createServiceFromOpenApi.useMutation({
      onSuccess: (data) => {
        toast.success("Docs created successfully");
        const firstVersion = data.versions[0];
        router.push(`/service/${data.id}/${firstVersion?.id}`);
      },
      onError: () => {
        toast.error("Failed to create docs");
      },
    });
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      serviceName: "",
      description: "",
    },
  });

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    if (!file) {
      toast.error("Please upload a valid OpenAPI specification file");
      return;
    }
    try {
      const fileText = await file.text();
      const jsonData = JSON.parse(fileText) as OpenAPI.Document;
      const parsedSpec = await SwaggerParser.dereference(jsonData);
      createServiceFromOpenApi({
        fileText: JSON.stringify(parsedSpec),
        serviceName: values.serviceName,
        version: "1.0.0",
        description: values.description,
      });
    } catch (error) {
      console.error(error);
      toast.error(
        "Failed to parse OpenAPI specification file. Please ensure it is a valid JSON file." ,
      );
    }
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <GlowingButton variant="secondary">Auto Generate</GlowingButton>
      </DialogTrigger>
      <DialogContent className="max-w-4xl">
        <DialogHeader>
          <DialogTitle>Auto Generate</DialogTitle>
          <DialogDescription>
            Auto generate a service by uploading an OpenAPI specification file
          </DialogDescription>
        </DialogHeader>
        <Input
          type="file"
          accept=".json"
          onChange={(e) => setFile(e.target.files?.[0] ?? null)}
        />
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="serviceName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Service Name</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Generate</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
