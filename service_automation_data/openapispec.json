{
  "openapi": "3.0.0",
  "info": {
    "title": "Sample API",
    "description": "A simple example API",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.example.com/v1",
      "description": "Staging server"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Returns a list of users",
        "description": "Optional extended description in Markdown.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of users to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of user names",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user in the system",
        "operationId": "createUser",
        "requestBody": {
          "description": "User object that needs to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Returns a user by ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "User object that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "summary": "Create a new order",
        "description": "Creates a new order with multiple items, shipping details, and payment information",
        "operationId": "createOrder",
        "requestBody": {
          "description": "Order details including items, shipping, and payment information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreate"
              },
              "examples": {
                "standard": {
                  "summary": "Standard order example",
                  "value": {
                    "customerId": 123,
                    "items": [
                      {
                        "productId": "PRD-789",
                        "quantity": 2,
                        "customizations": {
                          "color": "navy",
                          "size": "XL",
                          "text": "Custom message"
                        }
                      }
                    ],
                    "shippingAddress": {
                      "street": "123 Main St",
                      "unit": "Apt 4B",
                      "city": "Boston",
                      "state": "MA",
                      "zipCode": "02108",
                      "country": "USA",
                      "specialInstructions": "Leave with doorman"
                    },
                    "billing": {
                      "paymentMethod": "CREDIT_CARD",
                      "cardDetails": {
                        "lastFourDigits": "4242",
                        "expiryMonth": 12,
                        "expiryYear": 2025,
                        "cardholderName": "John Doe"
                      }
                    },
                    "preferences": {
                      "giftWrap": true,
                      "signature": false,
                      "priority": "STANDARD"
                    },
                    "metadata": {
                      "source": "mobile_app",
                      "version": "2.1.0",
                      "tags": ["holiday", "sale"]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "402": {
            "description": "Payment required or failed"
          }
        }
      }
    },
    "/orders/search": {
      "get": {
        "summary": "Search orders with advanced filtering",
        "description": "Advanced search endpoint with multiple parameter types and complex filtering options",
        "operationId": "searchOrders",
        "parameters": [
          {
            "name": "dateRange",
            "in": "query",
            "description": "Date range in ISO format (startDate/endDate)",
            "required": false,
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "properties": {
                "start": {
                  "type": "string",
                  "format": "date-time"
                },
                "end": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "example": "dateRange[start]=2024-01-01T00:00:00Z&dateRange[end]=2024-12-31T23:59:59Z"
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Complex filter criteria",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/SearchFilters"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "date:asc",
                  "date:desc",
                  "total:asc",
                  "total:desc",
                  "status:asc",
                  "status:desc"
                ]
              }
            },
            "style": "spaceDelimited",
            "example": "date:desc total:asc"
          },
          {
            "name": "geo-location",
            "in": "header",
            "description": "Geographic coordinates for location-based search",
            "schema": {
              "type": "object",
              "properties": {
                "latitude": {
                  "type": "number",
                  "format": "float"
                },
                "longitude": {
                  "type": "number",
                  "format": "float"
                },
                "radius": {
                  "type": "number",
                  "format": "float"
                }
              }
            },
            "style": "simple",
            "example": "37.7749,-122.4194,10.5"
          },
          {
            "name": "X-Analytics-Token",
            "in": "header",
            "description": "Analytics tracking token",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$"
            }
          },
          {
            "name": "preferredLanguage",
            "in": "cookie",
            "description": "User's preferred language for response localization",
            "schema": {
              "type": "string",
              "enum": ["en-US", "es-ES", "fr-FR"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search results",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of matching results",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Count": {
                "description": "Total number of pages",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/SearchMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "name", "email"]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "example": "secretpassword123"
          }
        },
        "required": ["name", "email", "password"]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          }
        }
      },
      "OrderCreate": {
        "type": "object",
        "required": ["customerId", "items", "shippingAddress", "billing"],
        "properties": {
          "customerId": {
            "type": "integer",
            "description": "ID of the customer placing the order"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 50,
            "description": "List of items in the order",
            "items": {
              "type": "object",
              "required": ["productId", "quantity"],
              "properties": {
                "productId": {
                  "type": "string",
                  "pattern": "^PRD-\\d{3,}$",
                  "description": "Product identifier"
                },
                "quantity": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 100
                },
                "customizations": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Custom modifications for the item"
                }
              }
            }
          },
          "shippingAddress": {
            "type": "object",
            "required": ["street", "city", "state", "zipCode", "country"],
            "properties": {
              "street": {
                "type": "string"
              },
              "unit": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              },
              "zipCode": {
                "type": "string",
                "pattern": "^\\d{5}(-\\d{4})?$"
              },
              "country": {
                "type": "string",
                "enum": ["USA", "Canada", "Mexico"]
              },
              "specialInstructions": {
                "type": "string",
                "maxLength": 500
              }
            }
          },
          "billing": {
            "type": "object",
            "required": ["paymentMethod"],
            "properties": {
              "paymentMethod": {
                "type": "string",
                "enum": ["CREDIT_CARD", "PAYPAL", "BANK_TRANSFER"],
                "description": "Payment method for the order"
              },
              "cardDetails": {
                "type": "object",
                "description": "Required only when paymentMethod is CREDIT_CARD",
                "required": [
                  "lastFourDigits",
                  "expiryMonth",
                  "expiryYear",
                  "cardholderName"
                ],
                "properties": {
                  "lastFourDigits": {
                    "type": "string",
                    "pattern": "^\\d{4}$"
                  },
                  "expiryMonth": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "expiryYear": {
                    "type": "integer",
                    "minimum": 2024,
                    "maximum": 2100
                  },
                  "cardholderName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  }
                }
              }
            }
          },
          "preferences": {
            "type": "object",
            "description": "Optional order preferences",
            "properties": {
              "giftWrap": {
                "type": "boolean",
                "default": false
              },
              "signature": {
                "type": "boolean",
                "default": false
              },
              "priority": {
                "type": "string",
                "enum": ["EXPRESS", "STANDARD", "ECONOMY"],
                "default": "STANDARD"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Additional order metadata",
            "properties": {
              "source": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": true
          }
        }
      },
      "SearchFilters": {
        "type": "object",
        "properties": {
          "status": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PENDING",
                "PROCESSING",
                "SHIPPED",
                "DELIVERED",
                "CANCELLED"
              ]
            }
          },
          "priceRange": {
            "type": "object",
            "properties": {
              "min": {
                "type": "number",
                "format": "float",
                "minimum": 0
              },
              "max": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
          },
          "fulfillmentCenter": {
            "type": "string",
            "pattern": "^FC-[A-Z]{2}-\\d{3}$"
          },
          "customerSegments": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["VIP", "REGULAR", "NEW"]
            }
          }
        }
      },
      "SearchMetadata": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "integer"
          },
          "pageCount": {
            "type": "integer"
          },
          "appliedFilters": {
            "type": "object",
            "additionalProperties": true
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "issue": {
                  "type": "string"
                },
                "location": {
                  "type": "string",
                  "enum": ["query", "header", "path", "cookie"]
                }
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "id",
          "customerId",
          "items",
          "status",
          "createdAt",
          "total"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^ORD-\\d{10}$",
            "description": "Unique order identifier"
          },
          "customerId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the customer who placed the order"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "SHIPPED",
              "DELIVERED",
              "CANCELLED"
            ],
            "description": "Current status of the order"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "description": "List of items in the order",
            "items": {
              "type": "object",
              "required": ["productId", "quantity", "price", "subtotal"],
              "properties": {
                "productId": {
                  "type": "string",
                  "pattern": "^PRD-\\d{3,}$"
                },
                "quantity": {
                  "type": "integer",
                  "minimum": 1
                },
                "price": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "subtotal": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0
                },
                "customizations": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/OrderCreate/properties/shippingAddress"
          },
          "billing": {
            "type": "object",
            "required": ["paymentMethod", "paymentStatus"],
            "properties": {
              "paymentMethod": {
                "type": "string",
                "enum": ["CREDIT_CARD", "PAYPAL", "BANK_TRANSFER"]
              },
              "paymentStatus": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "AUTHORIZED",
                  "CAPTURED",
                  "FAILED",
                  "REFUNDED"
                ]
              },
              "cardDetails": {
                "type": "object",
                "properties": {
                  "lastFourDigits": {
                    "type": "string",
                    "pattern": "^\\d{4}$"
                  },
                  "cardType": {
                    "type": "string",
                    "enum": ["VISA", "MASTERCARD", "AMEX", "DISCOVER"]
                  }
                }
              }
            }
          },
          "total": {
            "type": "object",
            "required": ["subtotal", "tax", "shipping", "grandTotal"],
            "properties": {
              "subtotal": {
                "type": "number",
                "format": "float",
                "minimum": 0
              },
              "tax": {
                "type": "number",
                "format": "float",
                "minimum": 0
              },
              "shipping": {
                "type": "number",
                "format": "float",
                "minimum": 0
              },
              "discount": {
                "type": "number",
                "format": "float",
                "minimum": 0
              },
              "grandTotal": {
                "type": "number",
                "format": "float",
                "minimum": 0
              }
            }
          },
          "preferences": {
            "$ref": "#/components/schemas/OrderCreate/properties/preferences"
          },
          "metadata": {
            "$ref": "#/components/schemas/OrderCreate/properties/metadata"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "estimatedDeliveryDate": {
            "type": "string",
            "format": "date"
          },
          "trackingInfo": {
            "type": "object",
            "properties": {
              "carrier": {
                "type": "string"
              },
              "trackingNumber": {
                "type": "string"
              },
              "trackingUrl": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    }
  }
}
